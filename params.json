{"tagline":"OAuth2 client library 1.0.0","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Oauth2-client","body":"# OAuth2 Ruby Client\r\n\r\n\r\n[![Gem Version](https://badge.fury.io/rb/oauth2-client.png)][gem]\r\n[![Build Status](https://secure.travis-ci.org/tiabas/oauth2-client.png?branch=master)][travis]\r\n\r\n[gem]: https://rubygems.org/gems/oauth2-client\r\n[travis]: http://travis-ci.org/tiabas/oauth2-client\r\n\r\nA Ruby wrapper for the OAuth 2.0 specification. It is designed with the philosophy that \r\ndifferent service providers implement OAuth 2.0 differently and not exactly according to the\r\n[RFC]( http://tools.ietf.org/html/rfc6749). This gem therefore, affords \r\nthe developer some degree of flexibility in creating a client that will work with many OAuth2\r\nproviders.\r\n\r\nFor more about the standard checkout: http://tools.ietf.org/html/rfc6749 \r\n\r\n## Installation\r\n```sh\r\ngem install twitter\r\n```\r\n\r\n## Resources\r\n* [View Source on GitHub][code]\r\n* [Report Issues on GitHub][issues]\r\n\r\n[code]: https://github.com/tiabas/oauth2-client\r\n[issues]: https://github.com/tiabas/oauth2-client/issues\r\n\r\n## Usage Examples\r\n\r\n```ruby\r\nrequire 'oauth2-client'\r\n\r\n@client  = OAuth2::Client.new('https://example.com', 's6BhdRkqt3', '4hJZY88TCBB9q8IpkeualA2lZsUhOSclkkSKw3RXuE')\r\n\r\nclient.authorization_code.authorization_path(:redirect_uri => 'http://localhost/oauth2/cb')\r\n# => \"/oauth/authorize?response_type=code&client_id={client_id}&redirect_uri=http%3A%2F%2Flocalhost%2Foauth2%2Fcb\"\r\n\r\n```\r\n\r\n## Authorization Grants\r\nThe client wraps around the creation of any given grant and passing in the parameters defined in the configuration\r\nfile. The supported grants include Authorization Code, Implicit, Resource Owner Password Credentials, Client Credentials.\r\nThere is also support for device authentication as described in Google's OAuth 2.0 authentication methods(https://developers.google.com/accounts/docs/OAuth2ForDevices). They are available via the #authorization_code, #implicit, #password, #client_credentials, #refresh_token\r\nand #device methods on a client object.\r\n\r\nThe #get_token method on the grants does not make any assumptions about the format ofthe response from the OAuth provider. The ideal\r\ncase would be to treat all responses as JSON. However, some services may respond with in XML instead of JSON. The #get_token method\r\ntherefore, returns with an HTTPResponse object.\r\n\r\n### Authorization Code\r\n```ruby\r\nauth_url = client.authorization_code.authorization_path(:redirect_uri => 'http://localhost/oauth2/cb')\r\n# => \"/oauth/authorize?response_type=code&client_id={client_id}&redirect_uri=http%3A%2F%2Flocalhost%2Foauth2%2Fcb\"\r\n\r\ntoken_url = client.authorization_code.token_path(\r\n    :code => aXW2c6bYz, \r\n    :redirect_uri => 'http://localhost/oauth2/cb')\r\n# => \"/oauth/token?redirect_uri=http%3A%2F%2Flocalhost%2Foauth%2Fcb&client_secret={client_secret}&grant_type=authorization_code&client_id={client_id}&code=aXW2c6bYz\"\r\n```\r\n\r\n### Implicit Grant\r\n```ruby\r\nauth_url = client.implicit.authorization_path(:redirect_uri => 'http://localhost/oauth2/cb')\r\n# => \"oauth/?redirect_uri=http%3A%2F%2Flocalhost%2Foauth%2Fcb&response_type=token&client_id={client_id}\"\r\n```\r\n\r\n### Password Credentials\r\n```ruby\r\ntoken = client.password.get_token('username', 'password')\r\n```\r\n\r\n### Refresh Token\r\n```ruby\r\ntoken = client.refresh_token.get_token(refresh_token_value, :params => {:scope => 'abc xyz', :state => 'state'})\r\n```\r\n\r\n### Client Credentials\r\n```ruby\r\ntoken = client.client_credentials.get_token\r\n```\r\n\r\n### Device Code\r\n```ruby\r\nauth_url = client.device_code.authorization_path(:scope => 'abc xyz', :state => 'state')\r\n# => \"/oauth/device/code?scope=abc+xyz&state=state&client_id={client_id}\"\r\n\r\n# exchange device authorization code for access token\r\ntoken = client.device_code.get_token(device_auth_code)\r\n```\r\n\r\n# Client Examples\r\nThis library comes bundled with two sample implementations of Google and Yammer OAuth clients. These clients are \r\nmeant to showcase the degree of flexibilty that you get when using this library to interact with other OAuth 2.0\r\nproviders.\r\n\r\n## Google Client\r\n\r\n```ruby\r\n\r\ngoogle_client = GoogleClient.new(\r\n  'https://accounts.google.com',\r\n  '827502413694.apps.googleusercontent.com',\r\n  'a2nQpcUm2Dgq1chWdAvbXGTk',\r\n  {\r\n    :token_path     => '/o/oauth2/token',\r\n    :authorize_path => '/o/oauth2/auth',\r\n    :device_path    => '/o/oauth2/device/code'\r\n  }\r\n)\r\n\r\n```\r\n\r\n### Client-side authorization URL(Implicit grant)\r\n```ruby\r\nauth_url = google_client.webserver_authorization_url(\r\n    :scope => 'https://www.googleapis.com/auth/userinfo.email',\r\n    :state => '/profile',\r\n    :redirect_uri => 'https://oauth2-login-demo.appspot.com/code',\r\n    :approval_prompt => 'force')\r\n# => https://accounts.google.com/o/oauth2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email&state=%2Fprofile&redirect_uri=https%3A%2F%2Foauth2-login-demo.appspot.com%2Ftoken&approval_prompt=force&response_type=token&client_id=812741506391.apps.googleusercontent.com\r\n```\r\n\r\n### Server-side authorization URL(Authorization code grant)\r\n```ruby\r\nauth_url = google_client.clientside_authorization_url(\r\n    :scope => 'https://www.googleapis.com/auth/userinfo.email',\r\n    :state => '/profile',\r\n    :redirect_uri => 'http://localhost/oauth/code',\r\n    :approval_prompt => 'force')\r\n# => https://accounts.google.com/o/oauth2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email&state=%2Fprofile&redirect_uri=https%3A%2F%2Foauth2-login-demo.appspot.com%2Fcode&approval_prompt=force&response_type=code&client_id=812741506391.apps.googleusercontent.com\r\n\r\n# exchange authorization code for access token. we will get back a Net::HTTPResponse\r\nresponse = google_client.exchange_auth_code_for_token(\r\n  :params => {\r\n    :code => '4/dbB0-UD1cvrQg2EuEFtRtHwPEmvR.IrScsjgB5M4VuJJVnL49Cc8QdUjRdAI',\r\n    :redirect_uri => 'http://localhost/oauth/token'\r\n  }\r\n)\r\nresponse.inspect \r\n# => #<Net::HTTPOK:0x007ff8bc7c1200>\r\n\r\nresponse.body\r\n# => {\r\n  \"access_token\" : \"ya91.AHES8ZS-oCZnc5yHepnsosFjNln9ZKLuioF6FcMRCGUIzA\",\r\n  \"token_type\" : \"Bearer\",\r\n  \"expires_in\" : 3600,\r\n  \"id_token\" : \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjY4ZGM2ZmIxNDQ5OGJmMWRhNjNiMWYyMDA2YmRmMDA2N2Q4MzY\",\r\n  \"refresh_token\" : \"6/Ju8uhi9xOctGEyHRzWwHhaYimfxmY0tiJ_qW3qvjWXM\"\r\n}\r\n```\r\n\r\n## Supported Ruby Versions\r\nThis library aims to support and is [tested against][travis] the following Ruby\r\nversion:\r\n\r\n* Ruby 1.9.2\r\n* Ruby 1.9.3\r\n\r\nThis library may inadvertently work (or seem to work) on other Ruby\r\nimplementations, however support will only be provided for the versions listed\r\nabove.\r\n\r\n## Copyright\r\nCopyright (c) 2012 Kevin Mutyaba\r\nSee [LICENSE][] for details.\r\n[license]: https://github.com/tiabas/oauth2-client/blob/master/LICENSE"}